name: Manual Deploy of RoadSign Pictures
on:
  workflow_dispatch:
jobs:
  version:
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      tag: ${{ steps.bump-version.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.36.0
        id: bump-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch
          VERBOSE: true
          INITIAL_VERSION: 1.0.0
          DRY_RUN: true
  build-and-deploy:
    needs: version
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v3
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.139.0'
          extended: true
      - uses: actions/setup-node@v3
        with:
          node-version: '^16.17.1'
      - uses: actions/setup-go@v4
        with:
          go-version: '^1.20.0'
      - name: Setup Babashka
        uses: turtlequeue/setup-babashka@v1.7.0
        with:
          babashka-version: 1.4.192
      - run: go run main.go
        env:
          RSP_DATABASE_URL: ${{ secrets.DATABASE_URL }}
      - uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: |
            kv:key put all --namespace-id 032a57eafe57449eb913b66b37af4801 --path data/images.json
            kv:key put quality --namespace-id 032a57eafe57449eb913b66b37af4801 --path data/signsquality.json
            kv:key put county --namespace-id 032a57eafe57449eb913b66b37af4801 --path data/county.json
            kv:key put place --namespace-id 032a57eafe57449eb913b66b37af4801 --path data/place.json
            kv:key put state --namespace-id 032a57eafe57449eb913b66b37af4801 --path data/state.json

      - run: npm install
      - run: npm install

      - run: npx tailwindcss -i ./assets/css/input.css -o ./assets/css/index.css --jit --minify

      - run: hugo --gc --minify  --environment production
        env:
          HUGO_PARAMS_SEARCHINDEX: ${{ secrets.HUGO_PARAMS_SEARCHINDEX }}
          HUGO_PARAMS_SEARCHINDEXHIGHWAY: ${{ vars.HUGO_PARAMS_SEARCHINDEXHIGHWAY }}
          HUGO_PARAMS_SEARCHKEY: ${{ secrets.HUGO_PARAMS_SEARCHKEY }}
          HUGO_PARAMS_SEARCHURL: ${{ secrets.HUGO_PARAMS_SEARCHURL }}
          HUGO_PARAMS_VERSION: ${{ needs.version.outputs.tag }}
          HUGO_PARAMS_SIGNBASEURL: ${{ vars.HUGO_PARAMS_SIGNBASEURL }}
          HUGO_PARAMS_SHIELDBASEURL: ${{ vars.HUGO_PARAMS_SHIELDBASEURL }}
          HUGO_PARAMS_MAPTILE: ${{ vars.HUGO_PARAMS_MAPTILE }}
          HUGO_PARAMS_MAPBOXTOKEN: ${{ secrets.HUGO_PARAMS_MAPBOXTOKEN }}
          HUGO_PARAMS_RANDOMURL: ${{ vars.HUGO_PARAMS_RANDOMURL }}

      - name: Update Indexes
        run: bb index
        env:
          JDBC_DATABASE_URL: ${{ secrets.JDBC_DATABASE_URL }}
          HUGO_PARAMS_SEARCHURL: ${{ vars.INDEX_HOST }}
          HUGO_PARAMS_SEARCHKEY: ${{ secrets.INDEX_KEY }}
          HUGO_PARAMS_SIGNBASEURL: ${{ vars.HUGO_PARAMS_SIGNBASEURL }}
          HUGO_PARAMS_SEARCHINDEX: ${{ secrets.HUGO_PARAMS_SEARCHINDEX}}
          HUGO_PARAMS_SEARCHINDEXHIGHWAY: ${{ vars.HUGO_PARAMS_SEARCHINDEXHIGHWAY}}

      # Update Bot Index
      - name: Create Bot Index
        run: bb export-bot-database
        env:
          JDBC_DATABASE_URL: ${{ secrets.JDBC_DATABASE_URL }}

      - name: Upload Bot Index To Cloudflare
        continue-on-error: true
        run: aws s3 cp bot.db s3://bot/bot.db --checksum-algorithm CRC32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_USER }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET }}
          AWS_DEFAULT_REGION: auto
          AWS_ENDPOINT_URL: ${{ vars.CLOUDFLARE_R2_ENDPOINT }}

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - run: flyctl deploy -c fly.production.toml --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - run: flyctl deploy -c fly.toml --remote-only
        working-directory: tiles
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN_MAP_TILE }}