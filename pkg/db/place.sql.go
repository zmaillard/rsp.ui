// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: place.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const adminAreaCountryCountByName = `-- name: AdminAreaCountryCountByName :one
SELECT COUNT(*) FROM sign.admin_area_country WHERE name = $1
`

func (q *Queries) AdminAreaCountryCountByName(ctx context.Context, name pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, adminAreaCountryCountByName, name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const adminAreaCountyCountByName = `-- name: AdminAreaCountyCountByName :one
SELECT COUNT(*) FROM sign.admin_area_county WHERE name = $1 AND admin_area_stateid = $2
`

type AdminAreaCountyCountByNameParams struct {
	Name             pgtype.Text
	AdminAreaStateid pgtype.Int4
}

func (q *Queries) AdminAreaCountyCountByName(ctx context.Context, arg AdminAreaCountyCountByNameParams) (int64, error) {
	row := q.db.QueryRow(ctx, adminAreaCountyCountByName, arg.Name, arg.AdminAreaStateid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const adminAreaPlaceCountByName = `-- name: AdminAreaPlaceCountByName :one
SELECT COUNT(*) FROM sign.admin_area_place WHERE name = $1 AND admin_area_stateid = $2
`

type AdminAreaPlaceCountByNameParams struct {
	Name             pgtype.Text
	AdminAreaStateid pgtype.Int4
}

func (q *Queries) AdminAreaPlaceCountByName(ctx context.Context, arg AdminAreaPlaceCountByNameParams) (int64, error) {
	row := q.db.QueryRow(ctx, adminAreaPlaceCountByName, arg.Name, arg.AdminAreaStateid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const adminAreaStateCountByName = `-- name: AdminAreaStateCountByName :one
SELECT COUNT(*) FROM sign.admin_area_state WHERE name = $1 AND adminarea_country_id = $2
`

type AdminAreaStateCountByNameParams struct {
	Name               pgtype.Text
	AdminareaCountryID pgtype.Int4
}

func (q *Queries) AdminAreaStateCountByName(ctx context.Context, arg AdminAreaStateCountByNameParams) (int64, error) {
	row := q.db.QueryRow(ctx, adminAreaStateCountByName, arg.Name, arg.AdminareaCountryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAdminAreaCountryByName = `-- name: GetAdminAreaCountryByName :one
SELECT id, name, subdivision_name, slug, featured_sign_id, image_count FROM sign.admin_area_country WHERE name = $1
`

func (q *Queries) GetAdminAreaCountryByName(ctx context.Context, name pgtype.Text) (SignAdminAreaCountry, error) {
	row := q.db.QueryRow(ctx, getAdminAreaCountryByName, name)
	var i SignAdminAreaCountry
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubdivisionName,
		&i.Slug,
		&i.FeaturedSignID,
		&i.ImageCount,
	)
	return i, err
}

const getAdminAreaCountyByName = `-- name: GetAdminAreaCountyByName :one
SELECT id, name, slug, admin_area_stateid, image_count FROM sign.admin_area_county WHERE name = $1 AND admin_area_stateid = $2
`

type GetAdminAreaCountyByNameParams struct {
	Name             pgtype.Text
	AdminAreaStateid pgtype.Int4
}

func (q *Queries) GetAdminAreaCountyByName(ctx context.Context, arg GetAdminAreaCountyByNameParams) (SignAdminAreaCounty, error) {
	row := q.db.QueryRow(ctx, getAdminAreaCountyByName, arg.Name, arg.AdminAreaStateid)
	var i SignAdminAreaCounty
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.AdminAreaStateid,
		&i.ImageCount,
	)
	return i, err
}

const getAdminAreaPlaceByName = `-- name: GetAdminAreaPlaceByName :one
SELECT id, name, slug, admin_area_stateid, image_count FROM sign.admin_area_place WHERE name = $1 AND admin_area_stateid = $2
`

type GetAdminAreaPlaceByNameParams struct {
	Name             pgtype.Text
	AdminAreaStateid pgtype.Int4
}

func (q *Queries) GetAdminAreaPlaceByName(ctx context.Context, arg GetAdminAreaPlaceByNameParams) (SignAdminAreaPlace, error) {
	row := q.db.QueryRow(ctx, getAdminAreaPlaceByName, arg.Name, arg.AdminAreaStateid)
	var i SignAdminAreaPlace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.AdminAreaStateid,
		&i.ImageCount,
	)
	return i, err
}

const getAdminAreaStateByName = `-- name: GetAdminAreaStateByName :one
SELECT id, name, subdivision_name, slug, adminarea_country_id, featured_sign_id, image_count FROM sign.admin_area_state WHERE name = $1 AND adminarea_country_id = $2
`

type GetAdminAreaStateByNameParams struct {
	Name               pgtype.Text
	AdminareaCountryID pgtype.Int4
}

func (q *Queries) GetAdminAreaStateByName(ctx context.Context, arg GetAdminAreaStateByNameParams) (SignAdminAreaState, error) {
	row := q.db.QueryRow(ctx, getAdminAreaStateByName, arg.Name, arg.AdminareaCountryID)
	var i SignAdminAreaState
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubdivisionName,
		&i.Slug,
		&i.AdminareaCountryID,
		&i.FeaturedSignID,
		&i.ImageCount,
	)
	return i, err
}

const getAllCountries = `-- name: GetAllCountries :many
SELECT id, name, subdivision_name, slug, featured_sign_id, image_count FROM sign.admin_area_country
`

func (q *Queries) GetAllCountries(ctx context.Context) ([]SignAdminAreaCountry, error) {
	rows, err := q.db.Query(ctx, getAllCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignAdminAreaCountry
	for rows.Next() {
		var i SignAdminAreaCountry
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SubdivisionName,
			&i.Slug,
			&i.FeaturedSignID,
			&i.ImageCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllStates = `-- name: GetAllStates :many
SELECT id, name, subdivision_name, slug, adminarea_country_id, featured_sign_id, image_count FROM sign.admin_area_state
`

func (q *Queries) GetAllStates(ctx context.Context) ([]SignAdminAreaState, error) {
	rows, err := q.db.Query(ctx, getAllStates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignAdminAreaState
	for rows.Next() {
		var i SignAdminAreaState
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SubdivisionName,
			&i.Slug,
			&i.AdminareaCountryID,
			&i.FeaturedSignID,
			&i.ImageCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountry = `-- name: GetCountry :one
SELECT id, name, subdivision_name, slug, featured_sign_id, image_count FROM sign.admin_area_country WHERE id = $1
`

func (q *Queries) GetCountry(ctx context.Context, id int32) (SignAdminAreaCountry, error) {
	row := q.db.QueryRow(ctx, getCountry, id)
	var i SignAdminAreaCountry
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubdivisionName,
		&i.Slug,
		&i.FeaturedSignID,
		&i.ImageCount,
	)
	return i, err
}

const getState = `-- name: GetState :one
SELECT id, name, subdivision_name, slug, adminarea_country_id, featured_sign_id, image_count FROM sign.admin_area_state WHERE id = $1
`

func (q *Queries) GetState(ctx context.Context, id int32) (SignAdminAreaState, error) {
	row := q.db.QueryRow(ctx, getState, id)
	var i SignAdminAreaState
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubdivisionName,
		&i.Slug,
		&i.AdminareaCountryID,
		&i.FeaturedSignID,
		&i.ImageCount,
	)
	return i, err
}

const getStateByName = `-- name: GetStateByName :one
SELECT id, name, subdivision_name, slug, adminarea_country_id, featured_sign_id, image_count FROM sign.admin_area_state WHERE name = $1 LIMIT 1
`

func (q *Queries) GetStateByName(ctx context.Context, name pgtype.Text) (SignAdminAreaState, error) {
	row := q.db.QueryRow(ctx, getStateByName, name)
	var i SignAdminAreaState
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubdivisionName,
		&i.Slug,
		&i.AdminareaCountryID,
		&i.FeaturedSignID,
		&i.ImageCount,
	)
	return i, err
}

const getStatesByCountry = `-- name: GetStatesByCountry :many
SELECT id, name, subdivision_name, slug, adminarea_country_id, featured_sign_id, image_count FROM sign.admin_area_state WHERE adminarea_country_id = $1
`

func (q *Queries) GetStatesByCountry(ctx context.Context, adminareaCountryID pgtype.Int4) ([]SignAdminAreaState, error) {
	rows, err := q.db.Query(ctx, getStatesByCountry, adminareaCountryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignAdminAreaState
	for rows.Next() {
		var i SignAdminAreaState
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SubdivisionName,
			&i.Slug,
			&i.AdminareaCountryID,
			&i.FeaturedSignID,
			&i.ImageCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAdminAreaCountry = `-- name: InsertAdminAreaCountry :one
INSERT INTO sign.admin_area_country (name, slug) VALUES ($1, $2) RETURNING id, name, subdivision_name, slug, featured_sign_id, image_count
`

type InsertAdminAreaCountryParams struct {
	Name pgtype.Text
	Slug pgtype.Text
}

func (q *Queries) InsertAdminAreaCountry(ctx context.Context, arg InsertAdminAreaCountryParams) (SignAdminAreaCountry, error) {
	row := q.db.QueryRow(ctx, insertAdminAreaCountry, arg.Name, arg.Slug)
	var i SignAdminAreaCountry
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubdivisionName,
		&i.Slug,
		&i.FeaturedSignID,
		&i.ImageCount,
	)
	return i, err
}

const insertAdminAreaCounty = `-- name: InsertAdminAreaCounty :one
INSERT INTO sign.admin_area_county (name, slug, admin_area_stateid) VALUES ($1, $2, $3) RETURNING id, name, slug, admin_area_stateid, image_count
`

type InsertAdminAreaCountyParams struct {
	Name             pgtype.Text
	Slug             pgtype.Text
	AdminAreaStateid pgtype.Int4
}

func (q *Queries) InsertAdminAreaCounty(ctx context.Context, arg InsertAdminAreaCountyParams) (SignAdminAreaCounty, error) {
	row := q.db.QueryRow(ctx, insertAdminAreaCounty, arg.Name, arg.Slug, arg.AdminAreaStateid)
	var i SignAdminAreaCounty
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.AdminAreaStateid,
		&i.ImageCount,
	)
	return i, err
}

const insertAdminAreaPlace = `-- name: InsertAdminAreaPlace :one
INSERT INTO sign.admin_area_place (name, slug, admin_area_stateid) VALUES ($1, $2, $3) RETURNING id, name, slug, admin_area_stateid, image_count
`

type InsertAdminAreaPlaceParams struct {
	Name             pgtype.Text
	Slug             pgtype.Text
	AdminAreaStateid pgtype.Int4
}

func (q *Queries) InsertAdminAreaPlace(ctx context.Context, arg InsertAdminAreaPlaceParams) (SignAdminAreaPlace, error) {
	row := q.db.QueryRow(ctx, insertAdminAreaPlace, arg.Name, arg.Slug, arg.AdminAreaStateid)
	var i SignAdminAreaPlace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.AdminAreaStateid,
		&i.ImageCount,
	)
	return i, err
}

const insertAdminAreaState = `-- name: InsertAdminAreaState :one
INSERT INTO sign.admin_area_state (name, slug, adminarea_country_id) VALUES ($1, $2, $3) RETURNING id, name, subdivision_name, slug, adminarea_country_id, featured_sign_id, image_count
`

type InsertAdminAreaStateParams struct {
	Name               pgtype.Text
	Slug               pgtype.Text
	AdminareaCountryID pgtype.Int4
}

func (q *Queries) InsertAdminAreaState(ctx context.Context, arg InsertAdminAreaStateParams) (SignAdminAreaState, error) {
	row := q.db.QueryRow(ctx, insertAdminAreaState, arg.Name, arg.Slug, arg.AdminareaCountryID)
	var i SignAdminAreaState
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubdivisionName,
		&i.Slug,
		&i.AdminareaCountryID,
		&i.FeaturedSignID,
		&i.ImageCount,
	)
	return i, err
}

const insertAdminAreaStateWithSubdivision = `-- name: InsertAdminAreaStateWithSubdivision :one
INSERT INTO sign.admin_area_state (name, slug, subdivision_name, adminarea_country_id) VALUES ($1, $2, $3, $4) RETURNING id, name, subdivision_name, slug, adminarea_country_id, featured_sign_id, image_count
`

type InsertAdminAreaStateWithSubdivisionParams struct {
	Name               pgtype.Text
	Slug               pgtype.Text
	SubdivisionName    pgtype.Text
	AdminareaCountryID pgtype.Int4
}

func (q *Queries) InsertAdminAreaStateWithSubdivision(ctx context.Context, arg InsertAdminAreaStateWithSubdivisionParams) (SignAdminAreaState, error) {
	row := q.db.QueryRow(ctx, insertAdminAreaStateWithSubdivision,
		arg.Name,
		arg.Slug,
		arg.SubdivisionName,
		arg.AdminareaCountryID,
	)
	var i SignAdminAreaState
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubdivisionName,
		&i.Slug,
		&i.AdminareaCountryID,
		&i.FeaturedSignID,
		&i.ImageCount,
	)
	return i, err
}
