// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feature.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addHighwayToFeatureLink = `-- name: AddHighwayToFeatureLink :one
INSERT INTO sign.feature_link_highway (feature_link_id, highway_id, is_descending) VALUES ($1, $2, $3) RETURNING id
`

type AddHighwayToFeatureLinkParams struct {
	FeatureLinkID pgtype.Int4
	HighwayID     pgtype.Int4
	IsDescending  pgtype.Bool
}

func (q *Queries) AddHighwayToFeatureLink(ctx context.Context, arg AddHighwayToFeatureLinkParams) (int32, error) {
	row := q.db.QueryRow(ctx, addHighwayToFeatureLink, arg.FeatureLinkID, arg.HighwayID, arg.IsDescending)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createFeature = `-- name: CreateFeature :one
INSERT INTO sign.feature (point, name, admin_area_country_id, admin_area_state_id) VALUES (ST_PointFromText($1), $2, $3, $4) RETURNING id
`

type CreateFeatureParams struct {
	StPointfromtext    interface{}
	Name               pgtype.Text
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
}

func (q *Queries) CreateFeature(ctx context.Context, arg CreateFeatureParams) (int32, error) {
	row := q.db.QueryRow(ctx, createFeature,
		arg.StPointfromtext,
		arg.Name,
		arg.AdminAreaCountryID,
		arg.AdminAreaStateID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createFeatureLink = `-- name: CreateFeatureLink :one
INSERT INTO sign.feature_link (from_feature, to_feature) VALUES ($1, $2) RETURNING id
`

type CreateFeatureLinkParams struct {
	FromFeature pgtype.Int4
	ToFeature   pgtype.Int4
}

func (q *Queries) CreateFeatureLink(ctx context.Context, arg CreateFeatureLinkParams) (int32, error) {
	row := q.db.QueryRow(ctx, createFeatureLink, arg.FromFeature, arg.ToFeature)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteFeature = `-- name: DeleteFeature :exec
DELETE FROM sign.feature WHERE id = $1
`

func (q *Queries) DeleteFeature(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFeature, id)
	return err
}

const deleteFeatureLink = `-- name: DeleteFeatureLink :exec
DELETE FROM sign.feature_link WHERE id = $1
`

func (q *Queries) DeleteFeatureLink(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFeatureLink, id)
	return err
}

const deleteFeatureLinkHighway = `-- name: DeleteFeatureLinkHighway :exec
DELETE FROM sign.feature_link_highway WHERE feature_link_id = $1
`

func (q *Queries) DeleteFeatureLinkHighway(ctx context.Context, featureLinkID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteFeatureLinkHighway, featureLinkID)
	return err
}

const getAllFeaturedFeatures = `-- name: GetAllFeaturedFeatures :many
SELECT id, ST_X(point::geometry) as longitude, ST_Y(point::geometry) as latitude, name, admin_area_country_id, admin_area_state_id, featured  from sign.feature WHERE featured = $1
`

type GetAllFeaturedFeaturesRow struct {
	ID                 int32
	Longitude          interface{}
	Latitude           interface{}
	Name               pgtype.Text
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	Featured           pgtype.Bool
}

func (q *Queries) GetAllFeaturedFeatures(ctx context.Context, featured pgtype.Bool) ([]GetAllFeaturedFeaturesRow, error) {
	rows, err := q.db.Query(ctx, getAllFeaturedFeatures, featured)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFeaturedFeaturesRow
	for rows.Next() {
		var i GetAllFeaturedFeaturesRow
		if err := rows.Scan(
			&i.ID,
			&i.Longitude,
			&i.Latitude,
			&i.Name,
			&i.AdminAreaCountryID,
			&i.AdminAreaStateID,
			&i.Featured,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFeatures = `-- name: GetAllFeatures :many
SELECT id, ST_X(point::geometry) as longitude, ST_Y(point::geometry) as latitude, name, admin_area_country_id, admin_area_state_id, featured  from sign.feature
`

type GetAllFeaturesRow struct {
	ID                 int32
	Longitude          interface{}
	Latitude           interface{}
	Name               pgtype.Text
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	Featured           pgtype.Bool
}

func (q *Queries) GetAllFeatures(ctx context.Context) ([]GetAllFeaturesRow, error) {
	rows, err := q.db.Query(ctx, getAllFeatures)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFeaturesRow
	for rows.Next() {
		var i GetAllFeaturesRow
		if err := rows.Scan(
			&i.ID,
			&i.Longitude,
			&i.Latitude,
			&i.Name,
			&i.AdminAreaCountryID,
			&i.AdminAreaStateID,
			&i.Featured,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeature = `-- name: GetFeature :one
SELECT id, ST_X(point::geometry) as longitude, ST_Y(point::geometry) as latitude, name, admin_area_country_id, admin_area_state_id, featured  from sign.feature WHERE id = $1
`

type GetFeatureRow struct {
	ID                 int32
	Longitude          interface{}
	Latitude           interface{}
	Name               pgtype.Text
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	Featured           pgtype.Bool
}

func (q *Queries) GetFeature(ctx context.Context, id int32) (GetFeatureRow, error) {
	row := q.db.QueryRow(ctx, getFeature, id)
	var i GetFeatureRow
	err := row.Scan(
		&i.ID,
		&i.Longitude,
		&i.Latitude,
		&i.Name,
		&i.AdminAreaCountryID,
		&i.AdminAreaStateID,
		&i.Featured,
	)
	return i, err
}

const getFeatureConnectedCount = `-- name: GetFeatureConnectedCount :one
SELECT COUNT(*) from sign.feature_link WHERE from_feature = $1 OR to_feature = $1
`

func (q *Queries) GetFeatureConnectedCount(ctx context.Context, fromFeature pgtype.Int4) (int64, error) {
	row := q.db.QueryRow(ctx, getFeatureConnectedCount, fromFeature)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFeatureLink = `-- name: GetFeatureLink :one
SELECT id, from_feature, to_feature, road_name from sign.feature_link WHERE id = $1
`

type GetFeatureLinkRow struct {
	ID          int32
	FromFeature pgtype.Int4
	ToFeature   pgtype.Int4
	RoadName    pgtype.Text
}

func (q *Queries) GetFeatureLink(ctx context.Context, id int32) (GetFeatureLinkRow, error) {
	row := q.db.QueryRow(ctx, getFeatureLink, id)
	var i GetFeatureLinkRow
	err := row.Scan(
		&i.ID,
		&i.FromFeature,
		&i.ToFeature,
		&i.RoadName,
	)
	return i, err
}

const getFeatureLinkHighway = `-- name: GetFeatureLinkHighway :one
SELECT id, highway_id, feature_link_id, is_descending from sign.feature_link_highway WHERE highway_id = $1 AND feature_link_id = $2
`

type GetFeatureLinkHighwayParams struct {
	HighwayID     pgtype.Int4
	FeatureLinkID pgtype.Int4
}

func (q *Queries) GetFeatureLinkHighway(ctx context.Context, arg GetFeatureLinkHighwayParams) (SignFeatureLinkHighway, error) {
	row := q.db.QueryRow(ctx, getFeatureLinkHighway, arg.HighwayID, arg.FeatureLinkID)
	var i SignFeatureLinkHighway
	err := row.Scan(
		&i.ID,
		&i.HighwayID,
		&i.FeatureLinkID,
		&i.IsDescending,
	)
	return i, err
}

const getFeatureLinkHighwayDirection = `-- name: GetFeatureLinkHighwayDirection :one
SELECT is_descending from sign.feature_link_highway WHERE highway_id = $1 AND feature_link_id = $2
`

type GetFeatureLinkHighwayDirectionParams struct {
	HighwayID     pgtype.Int4
	FeatureLinkID pgtype.Int4
}

func (q *Queries) GetFeatureLinkHighwayDirection(ctx context.Context, arg GetFeatureLinkHighwayDirectionParams) (pgtype.Bool, error) {
	row := q.db.QueryRow(ctx, getFeatureLinkHighwayDirection, arg.HighwayID, arg.FeatureLinkID)
	var is_descending pgtype.Bool
	err := row.Scan(&is_descending)
	return is_descending, err
}

const getFeatureLinkHighways = `-- name: GetFeatureLinkHighways :many
SELECT flh.id, flh.highway_id, flh.feature_link_id, flh.is_descending, h.highway_name from sign.feature_link_highway flh INNER JOIN sign.highway h ON h.id = flh.highway_id WHERE feature_link_id = $1
`

type GetFeatureLinkHighwaysRow struct {
	ID            int32
	HighwayID     pgtype.Int4
	FeatureLinkID pgtype.Int4
	IsDescending  pgtype.Bool
	HighwayName   pgtype.Text
}

func (q *Queries) GetFeatureLinkHighways(ctx context.Context, featureLinkID pgtype.Int4) ([]GetFeatureLinkHighwaysRow, error) {
	rows, err := q.db.Query(ctx, getFeatureLinkHighways, featureLinkID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeatureLinkHighwaysRow
	for rows.Next() {
		var i GetFeatureLinkHighwaysRow
		if err := rows.Scan(
			&i.ID,
			&i.HighwayID,
			&i.FeatureLinkID,
			&i.IsDescending,
			&i.HighwayName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeatureLinksByIds = `-- name: GetFeatureLinksByIds :many
SELECT id, from_feature, to_feature, road_name from sign.feature_link WHERE id in ($1::int[])
`

type GetFeatureLinksByIdsRow struct {
	ID          int32
	FromFeature pgtype.Int4
	ToFeature   pgtype.Int4
	RoadName    pgtype.Text
}

func (q *Queries) GetFeatureLinksByIds(ctx context.Context, dollar_1 []int32) ([]GetFeatureLinksByIdsRow, error) {
	rows, err := q.db.Query(ctx, getFeatureLinksByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeatureLinksByIdsRow
	for rows.Next() {
		var i GetFeatureLinksByIdsRow
		if err := rows.Scan(
			&i.ID,
			&i.FromFeature,
			&i.ToFeature,
			&i.RoadName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeaturesWithinBuffer = `-- name: GetFeaturesWithinBuffer :many
SELECT id, ST_X(point::geometry) as longitude, ST_Y(point::geometry) as latitude, name, admin_area_country_id, admin_area_state_id, featured from sign.feature WHERE st_intersects(point, ST_Buffer(ST_GeogFromText($1)), $2 )
`

type GetFeaturesWithinBufferParams struct {
	StGeogfromtext interface{}
	StIntersects   interface{}
}

type GetFeaturesWithinBufferRow struct {
	ID                 int32
	Longitude          interface{}
	Latitude           interface{}
	Name               pgtype.Text
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	Featured           pgtype.Bool
}

func (q *Queries) GetFeaturesWithinBuffer(ctx context.Context, arg GetFeaturesWithinBufferParams) ([]GetFeaturesWithinBufferRow, error) {
	rows, err := q.db.Query(ctx, getFeaturesWithinBuffer, arg.StGeogfromtext, arg.StIntersects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeaturesWithinBufferRow
	for rows.Next() {
		var i GetFeaturesWithinBufferRow
		if err := rows.Scan(
			&i.ID,
			&i.Longitude,
			&i.Latitude,
			&i.Name,
			&i.AdminAreaCountryID,
			&i.AdminAreaStateID,
			&i.Featured,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeHighwayFromFeatureLink = `-- name: RemoveHighwayFromFeatureLink :exec
DELETE FROM sign.feature_link_highway WHERE highway_id = $1 AND feature_link_id = $2
`

type RemoveHighwayFromFeatureLinkParams struct {
	HighwayID     pgtype.Int4
	FeatureLinkID pgtype.Int4
}

func (q *Queries) RemoveHighwayFromFeatureLink(ctx context.Context, arg RemoveHighwayFromFeatureLinkParams) error {
	_, err := q.db.Exec(ctx, removeHighwayFromFeatureLink, arg.HighwayID, arg.FeatureLinkID)
	return err
}

const reverseFeatureLink = `-- name: ReverseFeatureLink :exec
UPDATE sign.feature_link SET to_feature = $1, from_feature = $2 WHERE id = $3
`

type ReverseFeatureLinkParams struct {
	ToFeature   pgtype.Int4
	FromFeature pgtype.Int4
	ID          int32
}

func (q *Queries) ReverseFeatureLink(ctx context.Context, arg ReverseFeatureLinkParams) error {
	_, err := q.db.Exec(ctx, reverseFeatureLink, arg.ToFeature, arg.FromFeature, arg.ID)
	return err
}

const reverseFeatureLinkHighway = `-- name: ReverseFeatureLinkHighway :exec
UPDATE sign.feature_link_highway SET is_descending = NOT is_descending WHERE id = $1
`

func (q *Queries) ReverseFeatureLinkHighway(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, reverseFeatureLinkHighway, id)
	return err
}

const updateBeginAndEnd = `-- name: UpdateBeginAndEnd :exec
UPDATE sign.feature_link SET from_feature = $1, to_feature = $2 WHERE id = $3
`

type UpdateBeginAndEndParams struct {
	FromFeature pgtype.Int4
	ToFeature   pgtype.Int4
	ID          int32
}

func (q *Queries) UpdateBeginAndEnd(ctx context.Context, arg UpdateBeginAndEndParams) error {
	_, err := q.db.Exec(ctx, updateBeginAndEnd, arg.FromFeature, arg.ToFeature, arg.ID)
	return err
}

const updateFeatureAdminArea = `-- name: UpdateFeatureAdminArea :exec
UPDATE sign.feature SET admin_area_country_id = $1, admin_area_state_id = $2 WHERE id = $3
`

type UpdateFeatureAdminAreaParams struct {
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	ID                 int32
}

func (q *Queries) UpdateFeatureAdminArea(ctx context.Context, arg UpdateFeatureAdminAreaParams) error {
	_, err := q.db.Exec(ctx, updateFeatureAdminArea, arg.AdminAreaCountryID, arg.AdminAreaStateID, arg.ID)
	return err
}

const updateFeatureLinkName = `-- name: UpdateFeatureLinkName :exec
UPDATE sign.feature_link SET road_name = $1 WHERE id = $2
`

type UpdateFeatureLinkNameParams struct {
	RoadName pgtype.Text
	ID       int32
}

func (q *Queries) UpdateFeatureLinkName(ctx context.Context, arg UpdateFeatureLinkNameParams) error {
	_, err := q.db.Exec(ctx, updateFeatureLinkName, arg.RoadName, arg.ID)
	return err
}

const updateFeatureName = `-- name: UpdateFeatureName :exec
UPDATE sign.feature SET name = $1 WHERE id = $2
`

type UpdateFeatureNameParams struct {
	Name pgtype.Text
	ID   int32
}

func (q *Queries) UpdateFeatureName(ctx context.Context, arg UpdateFeatureNameParams) error {
	_, err := q.db.Exec(ctx, updateFeatureName, arg.Name, arg.ID)
	return err
}

const updateFeatured = `-- name: UpdateFeatured :exec
UPDATE sign.feature SET featured = $1 WHERE id = $2
`

type UpdateFeaturedParams struct {
	Featured pgtype.Bool
	ID       int32
}

func (q *Queries) UpdateFeatured(ctx context.Context, arg UpdateFeaturedParams) error {
	_, err := q.db.Exec(ctx, updateFeatured, arg.Featured, arg.ID)
	return err
}
