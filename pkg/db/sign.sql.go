// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sign.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addTagToSign = `-- name: AddTagToSign :one
INSERT INTO sign.tag_highwaysign (tag_id, highwaysign_id) VALUES ($1, $2) RETURNING id, tag_id, highwaysign_id
`

type AddTagToSignParams struct {
	TagID         pgtype.Int4
	HighwaysignID pgtype.Int4
}

func (q *Queries) AddTagToSign(ctx context.Context, arg AddTagToSignParams) (SignTagHighwaysign, error) {
	row := q.db.QueryRow(ctx, addTagToSign, arg.TagID, arg.HighwaysignID)
	var i SignTagHighwaysign
	err := row.Scan(&i.ID, &i.TagID, &i.HighwaysignID)
	return i, err
}

const createSign = `-- name: CreateSign :one
INSERT INTO sign.highwaysign (date_taken, date_added, title, sign_description, image_width, image_height, point, imageid, feature_id, admin_area_country_id, admin_area_state_id, admin_area_county_id, admin_area_place_id) VALUES ($1, $2, $3, $4, $5, $6, ST_PointFromText($7), $8, $9, $10, $11, $12, $13) RETURNING id
`

type CreateSignParams struct {
	DateTaken          pgtype.Timestamp
	DateAdded          pgtype.Timestamp
	Title              pgtype.Text
	SignDescription    pgtype.Text
	ImageWidth         pgtype.Int4
	ImageHeight        pgtype.Int4
	StPointfromtext    interface{}
	Imageid            pgtype.Int8
	FeatureID          pgtype.Int4
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	AdminAreaCountyID  pgtype.Int4
	AdminAreaPlaceID   pgtype.Int4
}

func (q *Queries) CreateSign(ctx context.Context, arg CreateSignParams) (int32, error) {
	row := q.db.QueryRow(ctx, createSign,
		arg.DateTaken,
		arg.DateAdded,
		arg.Title,
		arg.SignDescription,
		arg.ImageWidth,
		arg.ImageHeight,
		arg.StPointfromtext,
		arg.Imageid,
		arg.FeatureID,
		arg.AdminAreaCountryID,
		arg.AdminAreaStateID,
		arg.AdminAreaCountyID,
		arg.AdminAreaPlaceID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createTag = `-- name: CreateTag :one
INSERT INTO sign.tag (name, slug, flickr_only) VALUES ($1, $2, $3) RETURNING id, name, slug, flickr_only, category_details, is_category
`

type CreateTagParams struct {
	Name       pgtype.Text
	Slug       pgtype.Text
	FlickrOnly pgtype.Bool
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (SignTag, error) {
	row := q.db.QueryRow(ctx, createTag, arg.Name, arg.Slug, arg.FlickrOnly)
	var i SignTag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.FlickrOnly,
		&i.CategoryDetails,
		&i.IsCategory,
	)
	return i, err
}

const deleteHighwaysOnSign = `-- name: DeleteHighwaysOnSign :exec
DELETE FROM sign.highwaysign_highway WHERE highwaysign_id = $1
`

func (q *Queries) DeleteHighwaysOnSign(ctx context.Context, highwaysignID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteHighwaysOnSign, highwaysignID)
	return err
}

const deletePendingChange = `-- name: DeletePendingChange :exec
DELETE FROM sign.highwaysign_pending_changes WHERE id = $1
`

func (q *Queries) DeletePendingChange(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePendingChange, id)
	return err
}

const deleteTagsOnSign = `-- name: DeleteTagsOnSign :exec
DELETE FROM sign.tag_highwaysign WHERE highwaysign_id = $1
`

func (q *Queries) DeleteTagsOnSign(ctx context.Context, highwaysignID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteTagsOnSign, highwaysignID)
	return err
}

const getAllSigns = `-- name: GetAllSigns :many
SELECT  id, flickrid, date_taken, date_added, title, sign_description, image_width, image_height, ST_X(point::geometry)::float as longitude, ST_Y(point::geometry)::float as latitude, imageid, lastsyncwithflickr, last_update, cropped_image_id, last_indexed, archived, feature_id, admin_area_country_id, admin_area_state_id, admin_area_county_id, admin_area_place_id
FROM sign.highwaysign
`

type GetAllSignsRow struct {
	ID                 int32
	Flickrid           pgtype.Text
	DateTaken          pgtype.Timestamp
	DateAdded          pgtype.Timestamp
	Title              pgtype.Text
	SignDescription    pgtype.Text
	ImageWidth         pgtype.Int4
	ImageHeight        pgtype.Int4
	Longitude          float64
	Latitude           float64
	Imageid            pgtype.Int8
	Lastsyncwithflickr pgtype.Date
	LastUpdate         pgtype.Timestamp
	CroppedImageID     pgtype.Int8
	LastIndexed        pgtype.Timestamp
	Archived           pgtype.Bool
	FeatureID          pgtype.Int4
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	AdminAreaCountyID  pgtype.Int4
	AdminAreaPlaceID   pgtype.Int4
}

func (q *Queries) GetAllSigns(ctx context.Context) ([]GetAllSignsRow, error) {
	rows, err := q.db.Query(ctx, getAllSigns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSignsRow
	for rows.Next() {
		var i GetAllSignsRow
		if err := rows.Scan(
			&i.ID,
			&i.Flickrid,
			&i.DateTaken,
			&i.DateAdded,
			&i.Title,
			&i.SignDescription,
			&i.ImageWidth,
			&i.ImageHeight,
			&i.Longitude,
			&i.Latitude,
			&i.Imageid,
			&i.Lastsyncwithflickr,
			&i.LastUpdate,
			&i.CroppedImageID,
			&i.LastIndexed,
			&i.Archived,
			&i.FeatureID,
			&i.AdminAreaCountryID,
			&i.AdminAreaStateID,
			&i.AdminAreaCountyID,
			&i.AdminAreaPlaceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSignsByCountrySearch = `-- name: GetAllSignsByCountrySearch :many
SELECT  id, flickrid, date_taken, date_added, title, sign_description, image_width, image_height, ST_X(point::geometry)::float as longitude, ST_Y(point::geometry)::float as latitude, imageid, lastsyncwithflickr, last_update, cropped_image_id, last_indexed, archived, feature_id, admin_area_country_id, admin_area_state_id, admin_area_county_id, admin_area_place_id, array_to_json(highway_tags.tags) as tags
FROM sign.highwaysign as hs
         LEFT OUTER JOIN (
    SELECT ths.highwaysign_id, ARRAY_AGG(t.name) as tags FROM sign.tag_highwaysign ths
                                                                  INNER JOIN sign.tag t on t.id = ths.tag_id
    GROUP BY ths.highwaysign_id
) highway_tags ON hs.id = highway_tags.highwaysign_id
WHERE admin_area_country_id = $1
ORDER BY date_taken DESC, id
LIMIT $2 OFFSET $3
`

type GetAllSignsByCountrySearchParams struct {
	AdminAreaCountryID pgtype.Int4
	Limit              int32
	Offset             int32
}

type GetAllSignsByCountrySearchRow struct {
	ID                 int32
	Flickrid           pgtype.Text
	DateTaken          pgtype.Timestamp
	DateAdded          pgtype.Timestamp
	Title              pgtype.Text
	SignDescription    pgtype.Text
	ImageWidth         pgtype.Int4
	ImageHeight        pgtype.Int4
	Longitude          float64
	Latitude           float64
	Imageid            pgtype.Int8
	Lastsyncwithflickr pgtype.Date
	LastUpdate         pgtype.Timestamp
	CroppedImageID     pgtype.Int8
	LastIndexed        pgtype.Timestamp
	Archived           pgtype.Bool
	FeatureID          pgtype.Int4
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	AdminAreaCountyID  pgtype.Int4
	AdminAreaPlaceID   pgtype.Int4
	Tags               []byte
}

func (q *Queries) GetAllSignsByCountrySearch(ctx context.Context, arg GetAllSignsByCountrySearchParams) ([]GetAllSignsByCountrySearchRow, error) {
	rows, err := q.db.Query(ctx, getAllSignsByCountrySearch, arg.AdminAreaCountryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSignsByCountrySearchRow
	for rows.Next() {
		var i GetAllSignsByCountrySearchRow
		if err := rows.Scan(
			&i.ID,
			&i.Flickrid,
			&i.DateTaken,
			&i.DateAdded,
			&i.Title,
			&i.SignDescription,
			&i.ImageWidth,
			&i.ImageHeight,
			&i.Longitude,
			&i.Latitude,
			&i.Imageid,
			&i.Lastsyncwithflickr,
			&i.LastUpdate,
			&i.CroppedImageID,
			&i.LastIndexed,
			&i.Archived,
			&i.FeatureID,
			&i.AdminAreaCountryID,
			&i.AdminAreaStateID,
			&i.AdminAreaCountyID,
			&i.AdminAreaPlaceID,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSignsByCountySearch = `-- name: GetAllSignsByCountySearch :many
SELECT  id, flickrid, date_taken, date_added, title, sign_description, image_width, image_height, ST_X(point::geometry)::float as longitude, ST_Y(point::geometry)::float as latitude, imageid, lastsyncwithflickr, last_update, cropped_image_id, last_indexed, archived, feature_id, admin_area_country_id, admin_area_state_id, admin_area_county_id, admin_area_place_id, array_to_json(highway_tags.tags) as tags
FROM sign.highwaysign
         LEFT OUTER JOIN (
    SELECT ths.highwaysign_id, ARRAY_AGG(t.name) as tags FROM sign.tag_highwaysign ths
                                                                  INNER JOIN sign.tag t on t.id = ths.tag_id
    GROUP BY ths.highwaysign_id
) highway_tags ON highwaysign.id = highway_tags.highwaysign_id
WHERE admin_area_county_id = $1
ORDER BY date_taken DESC, id
LIMIT $2 OFFSET $3
`

type GetAllSignsByCountySearchParams struct {
	AdminAreaCountyID pgtype.Int4
	Limit             int32
	Offset            int32
}

type GetAllSignsByCountySearchRow struct {
	ID                 int32
	Flickrid           pgtype.Text
	DateTaken          pgtype.Timestamp
	DateAdded          pgtype.Timestamp
	Title              pgtype.Text
	SignDescription    pgtype.Text
	ImageWidth         pgtype.Int4
	ImageHeight        pgtype.Int4
	Longitude          float64
	Latitude           float64
	Imageid            pgtype.Int8
	Lastsyncwithflickr pgtype.Date
	LastUpdate         pgtype.Timestamp
	CroppedImageID     pgtype.Int8
	LastIndexed        pgtype.Timestamp
	Archived           pgtype.Bool
	FeatureID          pgtype.Int4
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	AdminAreaCountyID  pgtype.Int4
	AdminAreaPlaceID   pgtype.Int4
	Tags               []byte
}

func (q *Queries) GetAllSignsByCountySearch(ctx context.Context, arg GetAllSignsByCountySearchParams) ([]GetAllSignsByCountySearchRow, error) {
	rows, err := q.db.Query(ctx, getAllSignsByCountySearch, arg.AdminAreaCountyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSignsByCountySearchRow
	for rows.Next() {
		var i GetAllSignsByCountySearchRow
		if err := rows.Scan(
			&i.ID,
			&i.Flickrid,
			&i.DateTaken,
			&i.DateAdded,
			&i.Title,
			&i.SignDescription,
			&i.ImageWidth,
			&i.ImageHeight,
			&i.Longitude,
			&i.Latitude,
			&i.Imageid,
			&i.Lastsyncwithflickr,
			&i.LastUpdate,
			&i.CroppedImageID,
			&i.LastIndexed,
			&i.Archived,
			&i.FeatureID,
			&i.AdminAreaCountryID,
			&i.AdminAreaStateID,
			&i.AdminAreaCountyID,
			&i.AdminAreaPlaceID,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSignsByStateSearch = `-- name: GetAllSignsByStateSearch :many
SELECT  id, flickrid, date_taken, date_added, title, sign_description, image_width, image_height, ST_X(point::geometry)::float as longitude, ST_Y(point::geometry)::float as latitude, imageid, lastsyncwithflickr, last_update, cropped_image_id, last_indexed, archived, feature_id, admin_area_country_id, admin_area_state_id, admin_area_county_id, admin_area_place_id, array_to_json(highway_tags.tags) as tags
FROM sign.highwaysign
         LEFT OUTER JOIN (
    SELECT ths.highwaysign_id, ARRAY_AGG(t.name) as tags FROM sign.tag_highwaysign ths
                                                                  INNER JOIN sign.tag t on t.id = ths.tag_id
    GROUP BY ths.highwaysign_id
) highway_tags ON highwaysign.id = highway_tags.highwaysign_id
WHERE admin_area_state_id = $1
ORDER BY date_taken DESC, id
LIMIT $2 OFFSET $3
`

type GetAllSignsByStateSearchParams struct {
	AdminAreaStateID pgtype.Int4
	Limit            int32
	Offset           int32
}

type GetAllSignsByStateSearchRow struct {
	ID                 int32
	Flickrid           pgtype.Text
	DateTaken          pgtype.Timestamp
	DateAdded          pgtype.Timestamp
	Title              pgtype.Text
	SignDescription    pgtype.Text
	ImageWidth         pgtype.Int4
	ImageHeight        pgtype.Int4
	Longitude          float64
	Latitude           float64
	Imageid            pgtype.Int8
	Lastsyncwithflickr pgtype.Date
	LastUpdate         pgtype.Timestamp
	CroppedImageID     pgtype.Int8
	LastIndexed        pgtype.Timestamp
	Archived           pgtype.Bool
	FeatureID          pgtype.Int4
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	AdminAreaCountyID  pgtype.Int4
	AdminAreaPlaceID   pgtype.Int4
	Tags               []byte
}

func (q *Queries) GetAllSignsByStateSearch(ctx context.Context, arg GetAllSignsByStateSearchParams) ([]GetAllSignsByStateSearchRow, error) {
	rows, err := q.db.Query(ctx, getAllSignsByStateSearch, arg.AdminAreaStateID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSignsByStateSearchRow
	for rows.Next() {
		var i GetAllSignsByStateSearchRow
		if err := rows.Scan(
			&i.ID,
			&i.Flickrid,
			&i.DateTaken,
			&i.DateAdded,
			&i.Title,
			&i.SignDescription,
			&i.ImageWidth,
			&i.ImageHeight,
			&i.Longitude,
			&i.Latitude,
			&i.Imageid,
			&i.Lastsyncwithflickr,
			&i.LastUpdate,
			&i.CroppedImageID,
			&i.LastIndexed,
			&i.Archived,
			&i.FeatureID,
			&i.AdminAreaCountryID,
			&i.AdminAreaStateID,
			&i.AdminAreaCountyID,
			&i.AdminAreaPlaceID,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategories = `-- name: GetCategories :many
SELECT id, name, slug, flickr_only, category_details, is_category FROM sign.tag WHERE is_category = true
`

func (q *Queries) GetCategories(ctx context.Context) ([]SignTag, error) {
	rows, err := q.db.Query(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignTag
	for rows.Next() {
		var i SignTag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.FlickrOnly,
			&i.CategoryDetails,
			&i.IsCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingChanges = `-- name: GetPendingChanges :many
SELECT id, highwaysign_id, changed_on FROM sign.highwaysign_pending_changes
`

func (q *Queries) GetPendingChanges(ctx context.Context) ([]SignHighwaysignPendingChange, error) {
	rows, err := q.db.Query(ctx, getPendingChanges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignHighwaysignPendingChange
	for rows.Next() {
		var i SignHighwaysignPendingChange
		if err := rows.Scan(&i.ID, &i.HighwaysignID, &i.ChangedOn); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSign = `-- name: GetSign :one
SELECT  id, flickrid, date_taken, date_added, title, sign_description, image_width, image_height, ST_X(point::geometry)::float as longitude, ST_Y(point::geometry)::float as latitude, imageid, lastsyncwithflickr, last_update, cropped_image_id, last_indexed, archived, feature_id, admin_area_country_id, admin_area_state_id, admin_area_county_id, admin_area_place_id
FROM sign.highwaysign WHERE id = $1
`

type GetSignRow struct {
	ID                 int32
	Flickrid           pgtype.Text
	DateTaken          pgtype.Timestamp
	DateAdded          pgtype.Timestamp
	Title              pgtype.Text
	SignDescription    pgtype.Text
	ImageWidth         pgtype.Int4
	ImageHeight        pgtype.Int4
	Longitude          float64
	Latitude           float64
	Imageid            pgtype.Int8
	Lastsyncwithflickr pgtype.Date
	LastUpdate         pgtype.Timestamp
	CroppedImageID     pgtype.Int8
	LastIndexed        pgtype.Timestamp
	Archived           pgtype.Bool
	FeatureID          pgtype.Int4
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	AdminAreaCountyID  pgtype.Int4
	AdminAreaPlaceID   pgtype.Int4
}

func (q *Queries) GetSign(ctx context.Context, id int32) (GetSignRow, error) {
	row := q.db.QueryRow(ctx, getSign, id)
	var i GetSignRow
	err := row.Scan(
		&i.ID,
		&i.Flickrid,
		&i.DateTaken,
		&i.DateAdded,
		&i.Title,
		&i.SignDescription,
		&i.ImageWidth,
		&i.ImageHeight,
		&i.Longitude,
		&i.Latitude,
		&i.Imageid,
		&i.Lastsyncwithflickr,
		&i.LastUpdate,
		&i.CroppedImageID,
		&i.LastIndexed,
		&i.Archived,
		&i.FeatureID,
		&i.AdminAreaCountryID,
		&i.AdminAreaStateID,
		&i.AdminAreaCountyID,
		&i.AdminAreaPlaceID,
	)
	return i, err
}

const getSignByImageId = `-- name: GetSignByImageId :one
SELECT  id, flickrid, date_taken, date_added, title, sign_description, image_width, image_height, ST_X(point::geometry)::float as longitude, ST_Y(point::geometry)::float as latitude, imageid, lastsyncwithflickr, last_update, cropped_image_id, last_indexed, archived, feature_id, admin_area_country_id, admin_area_state_id, admin_area_county_id, admin_area_place_id
FROM sign.highwaysign WHERE imageid = $1
`

type GetSignByImageIdRow struct {
	ID                 int32
	Flickrid           pgtype.Text
	DateTaken          pgtype.Timestamp
	DateAdded          pgtype.Timestamp
	Title              pgtype.Text
	SignDescription    pgtype.Text
	ImageWidth         pgtype.Int4
	ImageHeight        pgtype.Int4
	Longitude          float64
	Latitude           float64
	Imageid            pgtype.Int8
	Lastsyncwithflickr pgtype.Date
	LastUpdate         pgtype.Timestamp
	CroppedImageID     pgtype.Int8
	LastIndexed        pgtype.Timestamp
	Archived           pgtype.Bool
	FeatureID          pgtype.Int4
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	AdminAreaCountyID  pgtype.Int4
	AdminAreaPlaceID   pgtype.Int4
}

func (q *Queries) GetSignByImageId(ctx context.Context, imageid pgtype.Int8) (GetSignByImageIdRow, error) {
	row := q.db.QueryRow(ctx, getSignByImageId, imageid)
	var i GetSignByImageIdRow
	err := row.Scan(
		&i.ID,
		&i.Flickrid,
		&i.DateTaken,
		&i.DateAdded,
		&i.Title,
		&i.SignDescription,
		&i.ImageWidth,
		&i.ImageHeight,
		&i.Longitude,
		&i.Latitude,
		&i.Imageid,
		&i.Lastsyncwithflickr,
		&i.LastUpdate,
		&i.CroppedImageID,
		&i.LastIndexed,
		&i.Archived,
		&i.FeatureID,
		&i.AdminAreaCountryID,
		&i.AdminAreaStateID,
		&i.AdminAreaCountyID,
		&i.AdminAreaPlaceID,
	)
	return i, err
}

const getSignDetails = `-- name: GetSignDetails :one
SELECT  highwaysign.id, flickrid, date_taken, date_added, title, sign_description, image_width, image_height, ST_X(point::geometry)::float as longitude, ST_Y(point::geometry)::float as latitude, imageid, lastsyncwithflickr, last_update, cropped_image_id, last_indexed, archived, feature_id, s.name as state, c.name as country, co.name as county, p.name as place
FROM sign.highwaysign INNER JOIN sign.admin_area_state s on highwaysign.admin_area_state_id = s.id
                      INNER JOIN sign.admin_area_country c on highwaysign.admin_area_country_id = c.id
                      LEFT JOIN sign.admin_area_county co on highwaysign.admin_area_county_id = co.id
                      LEFT JOIN sign.admin_area_place p on highwaysign.admin_area_place_id = p.id
WHERE highwaysign.id = $1
`

type GetSignDetailsRow struct {
	ID                 int32
	Flickrid           pgtype.Text
	DateTaken          pgtype.Timestamp
	DateAdded          pgtype.Timestamp
	Title              pgtype.Text
	SignDescription    pgtype.Text
	ImageWidth         pgtype.Int4
	ImageHeight        pgtype.Int4
	Longitude          float64
	Latitude           float64
	Imageid            pgtype.Int8
	Lastsyncwithflickr pgtype.Date
	LastUpdate         pgtype.Timestamp
	CroppedImageID     pgtype.Int8
	LastIndexed        pgtype.Timestamp
	Archived           pgtype.Bool
	FeatureID          pgtype.Int4
	State              pgtype.Text
	Country            pgtype.Text
	County             pgtype.Text
	Place              pgtype.Text
}

func (q *Queries) GetSignDetails(ctx context.Context, id int32) (GetSignDetailsRow, error) {
	row := q.db.QueryRow(ctx, getSignDetails, id)
	var i GetSignDetailsRow
	err := row.Scan(
		&i.ID,
		&i.Flickrid,
		&i.DateTaken,
		&i.DateAdded,
		&i.Title,
		&i.SignDescription,
		&i.ImageWidth,
		&i.ImageHeight,
		&i.Longitude,
		&i.Latitude,
		&i.Imageid,
		&i.Lastsyncwithflickr,
		&i.LastUpdate,
		&i.CroppedImageID,
		&i.LastIndexed,
		&i.Archived,
		&i.FeatureID,
		&i.State,
		&i.Country,
		&i.County,
		&i.Place,
	)
	return i, err
}

const getSignTags = `-- name: GetSignTags :many
SELECT t.name FROM sign.tag_highwaysign ths
    INNER JOIN sign.tag t on ths.tag_id = t.id
         WHERE ths.highwaysign_id = $1
`

func (q *Queries) GetSignTags(ctx context.Context, highwaysignID pgtype.Int4) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, getSignTags, highwaysignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Text
	for rows.Next() {
		var name pgtype.Text
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSignsByFeatureId = `-- name: GetSignsByFeatureId :many
SELECT  id, flickrid, date_taken, date_added, title, sign_description, image_width, image_height, ST_X(point::geometry)::float as longitude, ST_Y(point::geometry)::float as latitude, imageid, lastsyncwithflickr, last_update, cropped_image_id, last_indexed, archived, feature_id, admin_area_country_id, admin_area_state_id, admin_area_county_id, admin_area_place_id
FROM sign.highwaysign WHERE feature_id = $1
`

type GetSignsByFeatureIdRow struct {
	ID                 int32
	Flickrid           pgtype.Text
	DateTaken          pgtype.Timestamp
	DateAdded          pgtype.Timestamp
	Title              pgtype.Text
	SignDescription    pgtype.Text
	ImageWidth         pgtype.Int4
	ImageHeight        pgtype.Int4
	Longitude          float64
	Latitude           float64
	Imageid            pgtype.Int8
	Lastsyncwithflickr pgtype.Date
	LastUpdate         pgtype.Timestamp
	CroppedImageID     pgtype.Int8
	LastIndexed        pgtype.Timestamp
	Archived           pgtype.Bool
	FeatureID          pgtype.Int4
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	AdminAreaCountyID  pgtype.Int4
	AdminAreaPlaceID   pgtype.Int4
}

func (q *Queries) GetSignsByFeatureId(ctx context.Context, featureID pgtype.Int4) ([]GetSignsByFeatureIdRow, error) {
	rows, err := q.db.Query(ctx, getSignsByFeatureId, featureID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSignsByFeatureIdRow
	for rows.Next() {
		var i GetSignsByFeatureIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Flickrid,
			&i.DateTaken,
			&i.DateAdded,
			&i.Title,
			&i.SignDescription,
			&i.ImageWidth,
			&i.ImageHeight,
			&i.Longitude,
			&i.Latitude,
			&i.Imageid,
			&i.Lastsyncwithflickr,
			&i.LastUpdate,
			&i.CroppedImageID,
			&i.LastIndexed,
			&i.Archived,
			&i.FeatureID,
			&i.AdminAreaCountryID,
			&i.AdminAreaStateID,
			&i.AdminAreaCountyID,
			&i.AdminAreaPlaceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSignsByIds = `-- name: GetSignsByIds :many
SELECT id, flickrid, date_taken, date_added, title, sign_description, image_width, image_height, ST_X(point::geometry)::float as longitude, ST_Y(point::geometry)::float as latitude, imageid, lastsyncwithflickr, last_update, cropped_image_id, last_indexed, archived, feature_id, admin_area_country_id, admin_area_state_id, admin_area_county_id, admin_area_place_id
FROM sign.highwaysign WHERE id = ANY($1::int[])
`

type GetSignsByIdsRow struct {
	ID                 int32
	Flickrid           pgtype.Text
	DateTaken          pgtype.Timestamp
	DateAdded          pgtype.Timestamp
	Title              pgtype.Text
	SignDescription    pgtype.Text
	ImageWidth         pgtype.Int4
	ImageHeight        pgtype.Int4
	Longitude          float64
	Latitude           float64
	Imageid            pgtype.Int8
	Lastsyncwithflickr pgtype.Date
	LastUpdate         pgtype.Timestamp
	CroppedImageID     pgtype.Int8
	LastIndexed        pgtype.Timestamp
	Archived           pgtype.Bool
	FeatureID          pgtype.Int4
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	AdminAreaCountyID  pgtype.Int4
	AdminAreaPlaceID   pgtype.Int4
}

func (q *Queries) GetSignsByIds(ctx context.Context, dollar_1 []int32) ([]GetSignsByIdsRow, error) {
	rows, err := q.db.Query(ctx, getSignsByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSignsByIdsRow
	for rows.Next() {
		var i GetSignsByIdsRow
		if err := rows.Scan(
			&i.ID,
			&i.Flickrid,
			&i.DateTaken,
			&i.DateAdded,
			&i.Title,
			&i.SignDescription,
			&i.ImageWidth,
			&i.ImageHeight,
			&i.Longitude,
			&i.Latitude,
			&i.Imageid,
			&i.Lastsyncwithflickr,
			&i.LastUpdate,
			&i.CroppedImageID,
			&i.LastIndexed,
			&i.Archived,
			&i.FeatureID,
			&i.AdminAreaCountryID,
			&i.AdminAreaStateID,
			&i.AdminAreaCountyID,
			&i.AdminAreaPlaceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSignsOnHighway = `-- name: GetSignsOnHighway :many
SELECT  h.id, flickrid, date_taken, date_added, title, sign_description, image_width, image_height, ST_X(point::geometry)::float as longitude, ST_Y(point::geometry)::float as latitude, imageid, lastsyncwithflickr, last_update, cropped_image_id, last_indexed, archived, feature_id, admin_area_country_id, admin_area_state_id, admin_area_county_id, admin_area_place_id
FROM sign.highwaysign_highway hsh
    INNER JOIN sign.highwaysign h on h.id = hsh.highwaysign_id
WHERE hsh.highway_id = $1
`

type GetSignsOnHighwayRow struct {
	ID                 int32
	Flickrid           pgtype.Text
	DateTaken          pgtype.Timestamp
	DateAdded          pgtype.Timestamp
	Title              pgtype.Text
	SignDescription    pgtype.Text
	ImageWidth         pgtype.Int4
	ImageHeight        pgtype.Int4
	Longitude          float64
	Latitude           float64
	Imageid            pgtype.Int8
	Lastsyncwithflickr pgtype.Date
	LastUpdate         pgtype.Timestamp
	CroppedImageID     pgtype.Int8
	LastIndexed        pgtype.Timestamp
	Archived           pgtype.Bool
	FeatureID          pgtype.Int4
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	AdminAreaCountyID  pgtype.Int4
	AdminAreaPlaceID   pgtype.Int4
}

func (q *Queries) GetSignsOnHighway(ctx context.Context, highwayID pgtype.Int4) ([]GetSignsOnHighwayRow, error) {
	rows, err := q.db.Query(ctx, getSignsOnHighway, highwayID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSignsOnHighwayRow
	for rows.Next() {
		var i GetSignsOnHighwayRow
		if err := rows.Scan(
			&i.ID,
			&i.Flickrid,
			&i.DateTaken,
			&i.DateAdded,
			&i.Title,
			&i.SignDescription,
			&i.ImageWidth,
			&i.ImageHeight,
			&i.Longitude,
			&i.Latitude,
			&i.Imageid,
			&i.Lastsyncwithflickr,
			&i.LastUpdate,
			&i.CroppedImageID,
			&i.LastIndexed,
			&i.Archived,
			&i.FeatureID,
			&i.AdminAreaCountryID,
			&i.AdminAreaStateID,
			&i.AdminAreaCountyID,
			&i.AdminAreaPlaceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagById = `-- name: GetTagById :one
SELECT id, name, slug, flickr_only, category_details, is_category FROM sign.tag WHERE id = $1
`

func (q *Queries) GetTagById(ctx context.Context, id int32) (SignTag, error) {
	row := q.db.QueryRow(ctx, getTagById, id)
	var i SignTag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.FlickrOnly,
		&i.CategoryDetails,
		&i.IsCategory,
	)
	return i, err
}

const getTagByName = `-- name: GetTagByName :one
SELECT id, name, slug, flickr_only, category_details, is_category FROM sign.tag WHERE name = $1
`

func (q *Queries) GetTagByName(ctx context.Context, name pgtype.Text) (SignTag, error) {
	row := q.db.QueryRow(ctx, getTagByName, name)
	var i SignTag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.FlickrOnly,
		&i.CategoryDetails,
		&i.IsCategory,
	)
	return i, err
}

const getTagsStartWith = `-- name: GetTagsStartWith :many
SELECT id, name, slug, flickr_only, category_details, is_category FROM sign.tag WHERE name ilike $1
`

func (q *Queries) GetTagsStartWith(ctx context.Context, name pgtype.Text) ([]SignTag, error) {
	rows, err := q.db.Query(ctx, getTagsStartWith, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignTag
	for rows.Next() {
		var i SignTag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.FlickrOnly,
			&i.CategoryDetails,
			&i.IsCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategoryDetails = `-- name: UpdateCategoryDetails :exec
UPDATE sign.tag SET category_details = $1  WHERE id = $2
`

type UpdateCategoryDetailsParams struct {
	CategoryDetails pgtype.Text
	TagID           int32
}

func (q *Queries) UpdateCategoryDetails(ctx context.Context, arg UpdateCategoryDetailsParams) error {
	_, err := q.db.Exec(ctx, updateCategoryDetails, arg.CategoryDetails, arg.TagID)
	return err
}

const updateFeaturedSignForHighwayType = `-- name: UpdateFeaturedSignForHighwayType :exec
UPDATE sign.highway_type SET display_image_id = $2 WHERE id = $1
`

type UpdateFeaturedSignForHighwayTypeParams struct {
	ID             int32
	DisplayImageID pgtype.Int4
}

func (q *Queries) UpdateFeaturedSignForHighwayType(ctx context.Context, arg UpdateFeaturedSignForHighwayTypeParams) error {
	_, err := q.db.Exec(ctx, updateFeaturedSignForHighwayType, arg.ID, arg.DisplayImageID)
	return err
}

const updateFeaturedSignForState = `-- name: UpdateFeaturedSignForState :exec
UPDATE sign.admin_area_state SET featured_sign_id = $2 WHERE id = $1
`

type UpdateFeaturedSignForStateParams struct {
	ID             int32
	FeaturedSignID pgtype.Int4
}

func (q *Queries) UpdateFeaturedSignForState(ctx context.Context, arg UpdateFeaturedSignForStateParams) error {
	_, err := q.db.Exec(ctx, updateFeaturedSignForState, arg.ID, arg.FeaturedSignID)
	return err
}

const updateLastUpdated = `-- name: UpdateLastUpdated :exec
UPDATE sign.highwaysign SET last_update = $2 WHERE id = $1
`

type UpdateLastUpdatedParams struct {
	ID         int32
	LastUpdate pgtype.Timestamp
}

func (q *Queries) UpdateLastUpdated(ctx context.Context, arg UpdateLastUpdatedParams) error {
	_, err := q.db.Exec(ctx, updateLastUpdated, arg.ID, arg.LastUpdate)
	return err
}

const updateSignAdminAreas = `-- name: UpdateSignAdminAreas :exec
UPDATE sign.highwaysign SET admin_area_country_id = $1 , admin_area_state_id = $2, admin_area_county_id = $3, admin_area_place_id = $4, last_update = $5 WHERE id = $6
`

type UpdateSignAdminAreasParams struct {
	AdminAreaCountryID pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	AdminAreaCountyID  pgtype.Int4
	AdminAreaPlaceID   pgtype.Int4
	LastUpdate         pgtype.Timestamp
	HighwaySignID      int32
}

func (q *Queries) UpdateSignAdminAreas(ctx context.Context, arg UpdateSignAdminAreasParams) error {
	_, err := q.db.Exec(ctx, updateSignAdminAreas,
		arg.AdminAreaCountryID,
		arg.AdminAreaStateID,
		arg.AdminAreaCountyID,
		arg.AdminAreaPlaceID,
		arg.LastUpdate,
		arg.HighwaySignID,
	)
	return err
}

const updateSignDescription = `-- name: UpdateSignDescription :exec
UPDATE sign.highwaysign SET sign_description = $2, last_update = $3 WHERE id = $1
`

type UpdateSignDescriptionParams struct {
	ID              int32
	SignDescription pgtype.Text
	LastUpdate      pgtype.Timestamp
}

func (q *Queries) UpdateSignDescription(ctx context.Context, arg UpdateSignDescriptionParams) error {
	_, err := q.db.Exec(ctx, updateSignDescription, arg.ID, arg.SignDescription, arg.LastUpdate)
	return err
}

const updateSignFeature = `-- name: UpdateSignFeature :exec
UPDATE sign.highwaysign SET feature_id = $2, last_update = $3 WHERE id = $1
`

type UpdateSignFeatureParams struct {
	ID         int32
	FeatureID  pgtype.Int4
	LastUpdate pgtype.Timestamp
}

func (q *Queries) UpdateSignFeature(ctx context.Context, arg UpdateSignFeatureParams) error {
	_, err := q.db.Exec(ctx, updateSignFeature, arg.ID, arg.FeatureID, arg.LastUpdate)
	return err
}

const updateSignLocation = `-- name: UpdateSignLocation :exec
UPDATE sign.highwaysign SET point = ST_PointFromText($1) WHERE id = $2
`

type UpdateSignLocationParams struct {
	StPointfromtext interface{}
	ID              int32
}

func (q *Queries) UpdateSignLocation(ctx context.Context, arg UpdateSignLocationParams) error {
	_, err := q.db.Exec(ctx, updateSignLocation, arg.StPointfromtext, arg.ID)
	return err
}

const updateSignTitle = `-- name: UpdateSignTitle :exec
UPDATE sign.highwaysign SET title = $2, last_update = $3 WHERE id = $1
`

type UpdateSignTitleParams struct {
	ID         int32
	Title      pgtype.Text
	LastUpdate pgtype.Timestamp
}

func (q *Queries) UpdateSignTitle(ctx context.Context, arg UpdateSignTitleParams) error {
	_, err := q.db.Exec(ctx, updateSignTitle, arg.ID, arg.Title, arg.LastUpdate)
	return err
}
