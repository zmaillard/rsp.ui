// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: highway.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHighway = `-- name: CreateHighway :one
INSERT INTO sign.highway (highway_name, highway_type_id, admin_area_state_id, admin_area_country_id, image_name, slug, scope_id, date_added, sort_number)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING id, highway_name, scope_id, slug, highway_type_id, image_name, date_added, sort_number, admin_area_country_id, admin_area_state_id
`

type CreateHighwayParams struct {
	HighwayName        pgtype.Text
	HighwayTypeID      pgtype.Int4
	AdminAreaStateID   pgtype.Int4
	AdminAreaCountryID pgtype.Int4
	ImageName          pgtype.Text
	Slug               pgtype.Text
	ScopeID            pgtype.Int4
	DateAdded          pgtype.Date
	SortNumber         pgtype.Int4
}

func (q *Queries) CreateHighway(ctx context.Context, arg CreateHighwayParams) (SignHighway, error) {
	row := q.db.QueryRow(ctx, createHighway,
		arg.HighwayName,
		arg.HighwayTypeID,
		arg.AdminAreaStateID,
		arg.AdminAreaCountryID,
		arg.ImageName,
		arg.Slug,
		arg.ScopeID,
		arg.DateAdded,
		arg.SortNumber,
	)
	var i SignHighway
	err := row.Scan(
		&i.ID,
		&i.HighwayName,
		&i.ScopeID,
		&i.Slug,
		&i.HighwayTypeID,
		&i.ImageName,
		&i.DateAdded,
		&i.SortNumber,
		&i.AdminAreaCountryID,
		&i.AdminAreaStateID,
	)
	return i, err
}

const createHighwayType = `-- name: CreateHighwayType :one
INSERT INTO sign.highway_type (highway_type_name, admin_area_country_id, slug, sort)
VALUES ($1, $2, $3, $4) RETURNING id, highway_type_name, sort, slug, display_image_id, image_count, admin_area_country_id
`

type CreateHighwayTypeParams struct {
	HighwayTypeName    pgtype.Text
	AdminAreaCountryID pgtype.Int4
	Slug               pgtype.Text
	Sort               pgtype.Int4
}

func (q *Queries) CreateHighwayType(ctx context.Context, arg CreateHighwayTypeParams) (SignHighwayType, error) {
	row := q.db.QueryRow(ctx, createHighwayType,
		arg.HighwayTypeName,
		arg.AdminAreaCountryID,
		arg.Slug,
		arg.Sort,
	)
	var i SignHighwayType
	err := row.Scan(
		&i.ID,
		&i.HighwayTypeName,
		&i.Sort,
		&i.Slug,
		&i.DisplayImageID,
		&i.ImageCount,
		&i.AdminAreaCountryID,
	)
	return i, err
}

const getAllHighwayTypes = `-- name: GetAllHighwayTypes :many
SELECT id, highway_type_name, sort, slug, display_image_id, image_count, admin_area_country_id FROM sign.highway_type
`

func (q *Queries) GetAllHighwayTypes(ctx context.Context) ([]SignHighwayType, error) {
	rows, err := q.db.Query(ctx, getAllHighwayTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignHighwayType
	for rows.Next() {
		var i SignHighwayType
		if err := rows.Scan(
			&i.ID,
			&i.HighwayTypeName,
			&i.Sort,
			&i.Slug,
			&i.DisplayImageID,
			&i.ImageCount,
			&i.AdminAreaCountryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHighways = `-- name: GetAllHighways :many
SELECT id, highway_name, scope_id, slug, highway_type_id, image_name, date_added, sort_number, admin_area_country_id, admin_area_state_id FROM sign.highway h
`

func (q *Queries) GetAllHighways(ctx context.Context) ([]SignHighway, error) {
	rows, err := q.db.Query(ctx, getAllHighways)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignHighway
	for rows.Next() {
		var i SignHighway
		if err := rows.Scan(
			&i.ID,
			&i.HighwayName,
			&i.ScopeID,
			&i.Slug,
			&i.HighwayTypeID,
			&i.ImageName,
			&i.DateAdded,
			&i.SortNumber,
			&i.AdminAreaCountryID,
			&i.AdminAreaStateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHighway = `-- name: GetHighway :one
SELECT id, highway_name, scope_id, slug, highway_type_id, image_name, date_added, sort_number, admin_area_country_id, admin_area_state_id FROM sign.highway h WHERE h.id = $1
`

func (q *Queries) GetHighway(ctx context.Context, id int32) (SignHighway, error) {
	row := q.db.QueryRow(ctx, getHighway, id)
	var i SignHighway
	err := row.Scan(
		&i.ID,
		&i.HighwayName,
		&i.ScopeID,
		&i.Slug,
		&i.HighwayTypeID,
		&i.ImageName,
		&i.DateAdded,
		&i.SortNumber,
		&i.AdminAreaCountryID,
		&i.AdminAreaStateID,
	)
	return i, err
}

const getHighwayByName = `-- name: GetHighwayByName :one
SELECT id, highway_name, scope_id, slug, highway_type_id, image_name, date_added, sort_number, admin_area_country_id, admin_area_state_id FROM sign.highway h WHERE h.highway_name = $1
`

func (q *Queries) GetHighwayByName(ctx context.Context, highwayName pgtype.Text) (SignHighway, error) {
	row := q.db.QueryRow(ctx, getHighwayByName, highwayName)
	var i SignHighway
	err := row.Scan(
		&i.ID,
		&i.HighwayName,
		&i.ScopeID,
		&i.Slug,
		&i.HighwayTypeID,
		&i.ImageName,
		&i.DateAdded,
		&i.SortNumber,
		&i.AdminAreaCountryID,
		&i.AdminAreaStateID,
	)
	return i, err
}

const getHighwayType = `-- name: GetHighwayType :one
SELECT id, highway_type_name, sort, slug, display_image_id, image_count, admin_area_country_id
FROM sign.highway_type WHERE id = $1
`

func (q *Queries) GetHighwayType(ctx context.Context, id int32) (SignHighwayType, error) {
	row := q.db.QueryRow(ctx, getHighwayType, id)
	var i SignHighwayType
	err := row.Scan(
		&i.ID,
		&i.HighwayTypeName,
		&i.Sort,
		&i.Slug,
		&i.DisplayImageID,
		&i.ImageCount,
		&i.AdminAreaCountryID,
	)
	return i, err
}

const getHighwayTypeByName = `-- name: GetHighwayTypeByName :one
SELECT id, highway_type_name, sort, slug, display_image_id, image_count, admin_area_country_id
FROM sign.highway_type WHERE highway_type_name = $1
`

func (q *Queries) GetHighwayTypeByName(ctx context.Context, highwayTypeName pgtype.Text) (SignHighwayType, error) {
	row := q.db.QueryRow(ctx, getHighwayTypeByName, highwayTypeName)
	var i SignHighwayType
	err := row.Scan(
		&i.ID,
		&i.HighwayTypeName,
		&i.Sort,
		&i.Slug,
		&i.DisplayImageID,
		&i.ImageCount,
		&i.AdminAreaCountryID,
	)
	return i, err
}

const getHighwaysForStateAndCountry = `-- name: GetHighwaysForStateAndCountry :many
SELECT id, highway_name, scope_id, slug, highway_type_id, image_name, date_added, sort_number, admin_area_country_id, admin_area_state_id FROM sign.highway WHERE admin_area_state_id = $1 OR (admin_area_state_id is null AND admin_area_country_id = $2) ORDER BY highway_name
`

type GetHighwaysForStateAndCountryParams struct {
	AdminAreaStateID   pgtype.Int4
	AdminAreaCountryID pgtype.Int4
}

func (q *Queries) GetHighwaysForStateAndCountry(ctx context.Context, arg GetHighwaysForStateAndCountryParams) ([]SignHighway, error) {
	rows, err := q.db.Query(ctx, getHighwaysForStateAndCountry, arg.AdminAreaStateID, arg.AdminAreaCountryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignHighway
	for rows.Next() {
		var i SignHighway
		if err := rows.Scan(
			&i.ID,
			&i.HighwayName,
			&i.ScopeID,
			&i.Slug,
			&i.HighwayTypeID,
			&i.ImageName,
			&i.DateAdded,
			&i.SortNumber,
			&i.AdminAreaCountryID,
			&i.AdminAreaStateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHighwaysOnSign = `-- name: GetHighwaysOnSign :many
SELECT hsh.is_to, h.id, h.highway_name FROM sign.highwaysign_highway hsh
    INNER JOIN sign.highway h on h.id = hsh.highway_id
    WHERE hsh.highwaysign_id = $1
`

type GetHighwaysOnSignRow struct {
	IsTo        pgtype.Bool
	ID          int32
	HighwayName pgtype.Text
}

func (q *Queries) GetHighwaysOnSign(ctx context.Context, highwaysignID pgtype.Int4) ([]GetHighwaysOnSignRow, error) {
	rows, err := q.db.Query(ctx, getHighwaysOnSign, highwaysignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHighwaysOnSignRow
	for rows.Next() {
		var i GetHighwaysOnSignRow
		if err := rows.Scan(&i.IsTo, &i.ID, &i.HighwayName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHighwaysStartWith = `-- name: GetHighwaysStartWith :many
SELECT id, highway_name, scope_id, slug, highway_type_id, image_name, date_added, sort_number, admin_area_country_id, admin_area_state_id FROM sign.highway WHERE highway_name ILIKE $1 ORDER BY highway_name
`

func (q *Queries) GetHighwaysStartWith(ctx context.Context, highwayName pgtype.Text) ([]SignHighway, error) {
	rows, err := q.db.Query(ctx, getHighwaysStartWith, highwayName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignHighway
	for rows.Next() {
		var i SignHighway
		if err := rows.Scan(
			&i.ID,
			&i.HighwayName,
			&i.ScopeID,
			&i.Slug,
			&i.HighwayTypeID,
			&i.ImageName,
			&i.DateAdded,
			&i.SortNumber,
			&i.AdminAreaCountryID,
			&i.AdminAreaStateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScope = `-- name: GetScope :one
SELECT id, scope FROM sign.highway_scope WHERE id = $1
`

func (q *Queries) GetScope(ctx context.Context, id int32) (SignHighwayScope, error) {
	row := q.db.QueryRow(ctx, getScope, id)
	var i SignHighwayScope
	err := row.Scan(&i.ID, &i.Scope)
	return i, err
}

const getScopeByName = `-- name: GetScopeByName :one
SELECT id, scope FROM sign.highway_scope WHERE scope = $1
`

func (q *Queries) GetScopeByName(ctx context.Context, scope pgtype.Text) (SignHighwayScope, error) {
	row := q.db.QueryRow(ctx, getScopeByName, scope)
	var i SignHighwayScope
	err := row.Scan(&i.ID, &i.Scope)
	return i, err
}

const getScopes = `-- name: GetScopes :many
SELECT id, scope FROM sign.highway_scope
`

func (q *Queries) GetScopes(ctx context.Context) ([]SignHighwayScope, error) {
	rows, err := q.db.Query(ctx, getScopes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignHighwayScope
	for rows.Next() {
		var i SignHighwayScope
		if err := rows.Scan(&i.ID, &i.Scope); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertHighwaySorting = `-- name: InsertHighwaySorting :one
INSERT INTO sign.highwaysign_highway (highway_id, highwaysign_id, is_to) VALUES ($1, $2, $3) RETURNING id, highway_id, highwaysign_id, is_to
`

type InsertHighwaySortingParams struct {
	HighwayID     pgtype.Int4
	HighwaysignID pgtype.Int4
	IsTo          pgtype.Bool
}

func (q *Queries) InsertHighwaySorting(ctx context.Context, arg InsertHighwaySortingParams) (SignHighwaysignHighway, error) {
	row := q.db.QueryRow(ctx, insertHighwaySorting, arg.HighwayID, arg.HighwaysignID, arg.IsTo)
	var i SignHighwaysignHighway
	err := row.Scan(
		&i.ID,
		&i.HighwayID,
		&i.HighwaysignID,
		&i.IsTo,
	)
	return i, err
}

const removeHighwaySorting = `-- name: RemoveHighwaySorting :exec
DELETE FROM sign.highwaysign_highway WHERE highway_id = $1 AND  highwaysign_id = $2
`

type RemoveHighwaySortingParams struct {
	HighwayID     pgtype.Int4
	HighwaysignID pgtype.Int4
}

func (q *Queries) RemoveHighwaySorting(ctx context.Context, arg RemoveHighwaySortingParams) error {
	_, err := q.db.Exec(ctx, removeHighwaySorting, arg.HighwayID, arg.HighwaysignID)
	return err
}

const updateAllHighwaySortingsOnSign = `-- name: UpdateAllHighwaySortingsOnSign :exec
UPDATE sign.highwaysign_highway SET highway_id = $1::int WHERE highwaysign_id = $2::int AND highway_id = $3::int
`

type UpdateAllHighwaySortingsOnSignParams struct {
	ToHighway   int32
	HighwaySign int32
	FromHighway int32
}

func (q *Queries) UpdateAllHighwaySortingsOnSign(ctx context.Context, arg UpdateAllHighwaySortingsOnSignParams) error {
	_, err := q.db.Exec(ctx, updateAllHighwaySortingsOnSign, arg.ToHighway, arg.HighwaySign, arg.FromHighway)
	return err
}

const updateHighwayType = `-- name: UpdateHighwayType :exec
UPDATE sign.highway SET highway_type_id = $1 WHERE id = $2
`

type UpdateHighwayTypeParams struct {
	HighwayTypeID pgtype.Int4
	ID            int32
}

func (q *Queries) UpdateHighwayType(ctx context.Context, arg UpdateHighwayTypeParams) error {
	_, err := q.db.Exec(ctx, updateHighwayType, arg.HighwayTypeID, arg.ID)
	return err
}

const updateImage = `-- name: UpdateImage :exec
UPDATE sign.highway SET image_name = $1 WHERE id = $2
`

type UpdateImageParams struct {
	ImageName pgtype.Text
	ID        int32
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) error {
	_, err := q.db.Exec(ctx, updateImage, arg.ImageName, arg.ID)
	return err
}
