// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: staging.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteStaging = `-- name: DeleteStaging :exec
DELETE FROM sign.highwaysign_staging WHERE id = $1
`

func (q *Queries) DeleteStaging(ctx context.Context, id pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteStaging, id)
	return err
}

const getAllStaging = `-- name: GetAllStaging :many
SELECT id, image_width, image_height, date_taken, imageid, latitude, longitude FROM sign.highwaysign_staging order by date_taken
`

func (q *Queries) GetAllStaging(ctx context.Context) ([]SignHighwaysignStaging, error) {
	rows, err := q.db.Query(ctx, getAllStaging)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SignHighwaysignStaging
	for rows.Next() {
		var i SignHighwaysignStaging
		if err := rows.Scan(
			&i.ID,
			&i.ImageWidth,
			&i.ImageHeight,
			&i.DateTaken,
			&i.Imageid,
			&i.Latitude,
			&i.Longitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStaging = `-- name: GetStaging :one
SELECT id, image_width, image_height, date_taken, imageid, latitude, longitude FROM sign.highwaysign_staging WHERE id = $1
`

func (q *Queries) GetStaging(ctx context.Context, id pgtype.Int4) (SignHighwaysignStaging, error) {
	row := q.db.QueryRow(ctx, getStaging, id)
	var i SignHighwaysignStaging
	err := row.Scan(
		&i.ID,
		&i.ImageWidth,
		&i.ImageHeight,
		&i.DateTaken,
		&i.Imageid,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const insertStaging = `-- name: InsertStaging :one
INSERT INTO sign.highwaysign_staging (image_width, image_height, date_taken, imageid, latitude, longitude) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, image_width, image_height, date_taken, imageid, latitude, longitude
`

type InsertStagingParams struct {
	Imagewidth  pgtype.Int4
	Imageheight pgtype.Int4
	Datetaken   pgtype.Timestamp
	Imageid     pgtype.Int8
	Latitude    pgtype.Float8
	Longitude   pgtype.Float8
}

func (q *Queries) InsertStaging(ctx context.Context, arg InsertStagingParams) (SignHighwaysignStaging, error) {
	row := q.db.QueryRow(ctx, insertStaging,
		arg.Imagewidth,
		arg.Imageheight,
		arg.Datetaken,
		arg.Imageid,
		arg.Latitude,
		arg.Longitude,
	)
	var i SignHighwaysignStaging
	err := row.Scan(
		&i.ID,
		&i.ImageWidth,
		&i.ImageHeight,
		&i.DateTaken,
		&i.Imageid,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}
